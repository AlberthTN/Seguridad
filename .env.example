# üîê Security Agent API Configuration
# Copy this file to .env and fill in your actual values

# API Configuration
API_HOST=0.0.0.0
API_PORT=1401
API_TOKEN=your_32_character_hex_token_here

# AI Model API Keys (Required for AI analysis)
# Get your API keys from the respective providers:

# OpenAI - https://platform.openai.com/api-keys
OPENAI_API_KEY=sk-your-openai-api-key-here

# Anthropic - https://console.anthropic.com/settings/keys
ANTHROPIC_API_KEY=sk-your-anthropic-api-key-here

# Google Gemini - https://aistudio.google.com/app/apikey
GOOGLE_API_KEY=your-google-gemini-api-key-here

# Mistral AI - https://console.mistral.ai/api-keys/
MISTRAL_API_KEY=your-mistral-api-key-here

# Cohere - https://dashboard.cohere.ai/api-keys
COHERE_API_KEY=your-cohere-api-key-here

# Available Models (comma-separated) - Updated with all current model versions
AVAILABLE_MODELS=openai:gpt-4o,openai:gpt-4o-mini,openai:gpt-4-turbo,openai:gpt-4,openai:gpt-3.5-turbo,anthropic:claude-3-5-sonnet-20241022,anthropic:claude-3-5-haiku-20241022,anthropic:claude-3-opus-20240229,anthropic:claude-3-sonnet-20240229,anthropic:claude-3-haiku-20240307,google:gemini-2.0-flash-exp,google:gemini-1.5-pro,google:gemini-1.5-flash,google:gemini-1.0-pro,mistral:mistral-large-latest,mistral:mistral-medium-latest,mistral:mistral-small-latest,mistral:codestral-latest,cohere:command-a-03-2025,cohere:command-r7b-12-2024,cohere:command-r-08-2024,cohere:command-r-plus-08-2024

# Application Settings
TZ=America/Mexico_City
ENVIRONMENT=development
LOG_LEVEL=INFO
PYTHONUNBUFFERED=1
PYTHONPATH=/app

# Security Settings
DEBUG=false
RELOAD=false
CORS_ORIGINS=http://localhost:3000,http://127.0.0.1:3000

# Docker Settings (for production)
DOCKER_REGISTRY=alberth121484
DOCKER_IMAGE=seguridad
DOCKER_TAG=01.00.001

# Health Check Settings
HEALTH_CHECK_TIMEOUT=10
HEALTH_CHECK_INTERVAL=30

# =============================================
# üìä BigQuery Configuration (Optional)
# =============================================
# Enable BigQuery integration for metrics and analytics
# If not configured, the application will work normally without BigQuery

# Google Cloud Project Configuration
BIGQUERY_PROJECT_ID=your-google-cloud-project-id
BIGQUERY_DATASET=security_metrics
BIGQUERY_LOCATION=us-central1
BIGQUERY_MAX_BYTES_BILLED=1000000000

# Google Cloud Service Account Credentials (JSON format)
# Create a service account with BigQuery permissions and paste the JSON content here
# Make sure to escape quotes properly or use single quotes
GOOGLE_APPLICATION_CREDENTIALS_JSON='{"type": "service_account", "project_id": "your-project", "private_key_id": "key-id", "private_key": "-----BEGIN PRIVATE KEY-----\nYOUR_PRIVATE_KEY\n-----END PRIVATE KEY-----\n", "client_email": "your-service-account@your-project.iam.gserviceaccount.com", "client_id": "client-id", "auth_uri": "https://accounts.google.com/o/oauth2/auth", "token_uri": "https://oauth2.googleapis.com/token", "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs", "client_x509_cert_url": "https://www.googleapis.com/robot/v1/metadata/x509/your-service-account%40your-project.iam.gserviceaccount.com"}'

# BigQuery Features:
# - Automatic table creation for security_analysis_metrics
# - Real-time metrics tracking (requests, response times, model usage)
# - Security pattern analysis and reporting
# - Error tracking and performance monitoring
# - Optional: Set BIGQUERY_PROJECT_ID to empty string to disable BigQuery

# =============================================
# INSTRUCTIONS:
# 1. Copy this file to .env
# 2. Replace all placeholder values with your actual keys
# 3. Generate a secure API token using: python generate_token.py
# 4. Configure BigQuery (optional) for advanced metrics
# 5. Never commit .env to version control!
# =============================================

# Example token generation command:
# python generate_token.py